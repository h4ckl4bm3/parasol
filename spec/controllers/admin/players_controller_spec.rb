require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::PlayersController do
  let(:admin) { create(:admin) }

  describe "GET index" do
    it "assigns all players as @players" do
      sign_in admin
      player = create(:player)
      player.confirm!
      get :index
      assigns(:players).should eq([player])
    end
  end

  describe "GET show" do
    it "assigns the requested player as @player" do
      sign_in admin
      player = create(:player)
      player.confirm!
      get :show, {id: player.to_param}
      assigns(:player).should eq(player)
    end
  end

  describe "GET new" do
    it "assigns a new player as @player" do
      sign_in admin
      get :new
      assigns(:player).should be_a_new(Player)
    end
  end

  describe "GET edit" do
    it "assigns the requested player as @player" do
      sign_in admin
      player = create(:player)
      player.confirm!
      get :edit, {id: player.to_param}
      assigns(:player).should eq(player)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Player" do
        sign_in admin
        expect {
          post :create, {player: make_valid_player_param_hash(build(:player))}
        }.to change(Player, :count).by(1)
      end

      it "assigns a newly created player as @player" do
        sign_in admin
        post :create, {player: make_valid_player_param_hash(build(:player))}
        assigns(:player).should be_a(Player)
        assigns(:player).should be_persisted
      end

      it "redirects to the created player" do
        sign_in admin
        post :create, {player: make_valid_player_param_hash(build(:player))}
        response.should redirect_to(admin_player_path(Player.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved player as @player" do
        sign_in admin
        # Trigger the behavior that occurs when invalid params are submitted
        Player.any_instance.stub(:save).and_return(false)
        post :create, {player: make_invalid_player_param_hash(build(:player))}
        assigns(:player).should be_a_new(Player)
      end

      it "re-renders the 'new' template" do
        sign_in admin
        # Trigger the behavior that occurs when invalid params are submitted
        Player.any_instance.stub(:save).and_return(false)
        post :create, {player: make_invalid_player_param_hash(build(:player))}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested player" do
        sign_in admin
        player = create(:player)
        player.confirm!
        # Assuming there are no other players in the database, this
        # specifies that the Player created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Player.any_instance.should_receive(:update).with({'these' => 'params'})
        put :update, {id: player.to_param, player: {'these' => 'params'}}
      end

      it "assigns the requested player as @player" do
        sign_in admin
        player = create(:player)
        player.confirm!
        put :update, {id: player.to_param, player: make_valid_player_param_hash(build(:player))}
        assigns(:player).should eq(player)
      end

      it "redirects to the player" do
        sign_in admin
        player = create(:player)
        player.confirm!
        put :update, {id: player.to_param, player: make_valid_player_param_hash(build(:player))}
        response.should redirect_to(admin_player_path(player))
      end
    end

    describe "with invalid params" do
      it "assigns the player as @player" do
        sign_in admin
        player = create(:player)
        player.confirm!
        # Trigger the behavior that occurs when invalid params are submitted
        Player.any_instance.stub(:save).and_return(false)
        put :update, {id: player.to_param, player: make_invalid_player_param_hash(player)}
        assigns(:player).should eq(player)
      end

      it "re-renders the 'edit' template" do
        sign_in admin
        player = create(:player)
        player.confirm!
        # Trigger the behavior that occurs when invalid params are submitted
        Player.any_instance.stub(:save).and_return(false)
        put :update, {id: player.to_param, player: make_invalid_player_param_hash(player)}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested player" do
      sign_in admin
      player = create(:player)
      player.confirm!
      expect {
        delete :destroy, {id: player.to_param}
      }.to change(Player, :count).by(-1)
    end

    it "redirects to the players list" do
      sign_in admin
      player = create(:player)
      player.confirm!
      delete :destroy, {id: player.to_param}
      response.should redirect_to(admin_players_url)
    end
  end

end
